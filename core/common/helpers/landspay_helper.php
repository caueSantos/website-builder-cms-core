<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');if (!function_exists('data_bd')) {    function data_bd($data) {        $DFm = explode("/", $data);        $data = $DFm[2] . '-' . $DFm[1] . '-' . $DFm[0];        return $data;    }}/** * Obtain a brand constant from a PAN  * * @param type $pan               Credit card number * @param type $include_sub_types Include detection of sub visa brands * @return string */if (!function_exists('getCardBrand')) {    function getCardBrand($pan, $include_sub_types = false) {                //maximum length is not fixed now, there are growing number of CCs has more numbers in length, limiting can give false negatives atm        //these regexps accept not whole cc numbers too        //visa                $visa_regex = "/^4[0-9]{0,}$/";        $vpreca_regex = "/^428485[0-9]{0,}$/";        $postepay_regex = "/^(402360|402361|403035|417631|529948){0,}$/";        $cartasi_regex = "/^(432917|432930|453998)[0-9]{0,}$/";        $entropay_regex = "/^(406742|410162|431380|459061|533844|522093)[0-9]{0,}$/";        $o2money_regex = "/^(422793|475743)[0-9]{0,}$/";        // MasterCard        $mastercard_regex = "/^(5[1-5]|222[1-9]|22[3-9]|2[3-6]|27[01]|2720)[0-9]{0,}$/";        $maestro_regex = "/^(5[06789]|6)[0-9]{0,}$/";        $kukuruza_regex = "/^525477[0-9]{0,}$/";        $yunacard_regex = "/^541275[0-9]{0,}$/";        // American Express        $amex_regex = "/^3[47][0-9]{0,}$/";        // Diners Club        $diners_regex = "/^3(?:0[0-59]{1}|[689])[0-9]{0,}$/";        //Discover        $discover_regex = "/^(6011|65|64[4-9]|62212[6-9]|6221[3-9]|622[2-8]|6229[01]|62292[0-5])[0-9]{0,}$/";        //JCB        $jcb_regex = "/^(?:2131|1800|35)[0-9]{0,}$/";        //ordering matter in detection, otherwise can give false results in rare cases        if (preg_match($jcb_regex, $pan)) {            return "jcb";        }        if (preg_match($amex_regex, $pan)) {            return "amex";        }        if (preg_match($diners_regex, $pan)) {            return "diners_club";        }        //sub visa/mastercard cards        if ($include_sub_types) {            if (preg_match($vpreca_regex, $pan)) {                return "v-preca";            }            if (preg_match($postepay_regex, $pan)) {                return "postepay";            }            if (preg_match($cartasi_regex, $pan)) {                return "cartasi";            }            if (preg_match($entropay_regex, $pan)) {                return "entropay";            }            if (preg_match($o2money_regex, $pan)) {                return "o2money";            }            if (preg_match($kukuruza_regex, $pan)) {                return "kukuruza";            }            if (preg_match($yunacard_regex, $pan)) {                return "yunacard";            }        }        if (preg_match($visa_regex, $pan)) {            return "visa";        }        if (preg_match($mastercard_regex, $pan)) {            return "master";        }        if (preg_match($discover_regex, $pan)) {            return "discover";        }        if (preg_match($maestro_regex, $pan)) {            if ($pan[0] == '5') {//started 5 must be mastercard                return "master";            }            return "master"; //maestro is all 60-69 which is not something else, thats why this condition in the end        }        return "unknown"; //unknown for this system    }}if (!function_exists('trata_status')) {    function trata_status($pagamento) {        $retorno = '';        switch ($pagamento->status) {            case 'aguardando':                $retorno = "<span class='alert alert-warning alerta'>" . strtoupper($pagamento->status) . "</span>";                break;            case 'pago':                $retorno = "<span class='alert alert-success alerta'>" . strtoupper($pagamento->status) . "</span>";                break;            default:                $retorno = "<span class='alert alert-info alerta'>" . strtoupper($pagamento->status) . "</span>";                break;        }        return $retorno;    }}if (!function_exists('consulta_pagamento')) {    function consulta_pagamento($id_sistema, $referencia) {        $url = "https://landspay.landshosting.com.br/consulta_pagamento/{$id_sistema}/{$referencia}";        $retorno = curlContents($url);        $retorno_tratado = json_decode($retorno['contents']);        return $retorno_tratado;    }}if (!function_exists('consulta_link')) {    function consulta_link($id_sistema, $referencia) {        $url = "https://landspay.landshosting.com.br/consulta_link/{$id_sistema}/{$referencia}";        $retorno = curlContents($url);        $retorno_tratado = json_decode($retorno['contents']);        return $retorno_tratado;    }}if (!function_exists('formata_moeda')) {    function formata_moeda($valor) {        $valores = explode(",", $valor);        if ($valores[1]) {            $valor_final = str_replace(".", "", $valores[0]);            $valor_final.="." . $valores[1];            return $valor_final;        } else {            return $valor;        }    }}if (!function_exists('jurosSimples')) {    function jurosSimples($valor, $taxa, $parcelas) {        $taxa = $taxa / 100;        $m = $valor * (1 + $taxa * $parcelas);        $valParcela = number_format($m / $parcelas, 2, ",", ".");        return $valParcela;    }}if (!function_exists('jurosComposto')) {    function jurosComposto($valor, $taxa, $parcelas) {        $taxa = $taxa / 100;        $valParcela = $valor * pow((1 + $taxa), $parcelas);        $valParcela = number_format($valParcela / $parcelas, 2, ",", ".");        return $valParcela;    }}