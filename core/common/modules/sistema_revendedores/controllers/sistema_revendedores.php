<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');require_once(COMMONPATH .        'core/lands_core.php');class sistema_revendedores extends lands_core {    public $usuario;    public $simulacoes;    public $simulacao;    function __construct() {        $this->load->library('session');        parent::__construct();        //ver("chegou");        if ($this->pagina_atual != 'cadastro') {            $this->checa_login();        }        $this->load->helper('revendedores');        $this->abre_sistema();    }    function index() {        $funcao = $this->pagina_atual;        if ($this->uri->segment($this->app->Segmento_padrao_txf)) {            $this->pagina_atual = $this->uri->segment($this->app->Segmento_padrao_txf);            $funcao = ($this->uri->segment($this->app->Segmento_padrao_txf));        }        if (!method_exists(__CLASS__, $funcao)) {            $this->carrega_pagina($this->pagina_atual);        } else {//executa uma funcao que deve ser programa nesta classe.            $this->$funcao();        }    }    function abre_sistema() {        if (isset($this->session->userdata['usuario'])) {            $this->usuario = $this->session->userdata['usuario'];        }        if (isset($_SESSION)) {            $this->smarty->assign('sessao', $_SESSION);        }        if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {            $this->smarty->assign('segment2', $this->uri->segment($this->app->Segmento_padrao_txf + 1));        } else {            $this->smarty->assign('segment2', '');        }        if ($this->uri->segment($this->app->Segmento_padrao_txf + 2)) {            $this->smarty->assign('segment3', $this->uri->segment($this->app->Segmento_padrao_txf + 2));        } else {            $this->smarty->assign('segment3', '');        }        $banner_popup = $this->mbc->buscar_completo("banner_popup", "where Ativo_sel='SIM'");        $this->smarty->assign('banner_popup', $banner_popup);        $this->switch_pagina();    }    function switch_pagina() {        //ver($this->pagina_atual);        $this->load->library('session');        $this->conecta_mbc($this->app->Conexoes_for);        switch ($this->pagina_atual) {            case 'editar_cadastro':                $user_id = $this->session->userdata['usuario']->Id_int;                $user = $this->mbc->executa_sql("select * from cadastros where Id_int=$user_id");                if (!isset($user[0]->Id_int))                    die('Erro ao editar usuario, usuario de id ' . $user_id . ' nao foi encontrado');                $this->smarty->assign('user', $user[0]);                break;            case 'inicio':                redirect('produtos');                $configuracao = $this->mbc->buscar_completo('configuracao', "where Id_int is not null limit 1");                $this->smarty->assign('configuracao', $configuracao);                $produtos = $this->mbc->buscar_completo('produtos', "where Ativo_sel = 'SIM' order by Prioridade_sel = 'SIM' DESC, Nome_produto_txf");//                ver($produtos);//                ver($configuracao);//                    $porcentagem = 1 + ($configuracao[0]->Porcentagem_txf / 100);                $porcentagem_revendedor = 1 + ($configuracao[0]->Porcentagem_revendedor_txf / 100);                $porcentagem_minimo = 1 + ($configuracao[0]->Porcentagem_minimo_txf / 100);                $porcentagem_sugerido = 1 + ($configuracao[0]->Porcentagem_sugerido_txf / 100);//                    ver($porcentagem);                foreach ($produtos as $produto) {                    $produto->Preco_revendedor_txf = number_format($produto->Preco_revendedor_txf * $porcentagem_revendedor, 2, ",", ".");                    $produto->Preco_minimo_txf = number_format($produto->Preco_minimo_txf * $porcentagem_minimo, 2, ",", ".");                    $produto->Preco_sugerido_txf = number_format($produto->Preco_sugerido_txf * $porcentagem_sugerido, 2, ",", ".");                }                $this->smarty->assign('produtos', $produtos);//                    if (is_lands()) {//                        //                } else {//                    $produtos = $this->mbc->buscar_completo('produtos', "where Ativo_sel = 'SIM' order by Prioridade_sel = 'SIM' DESC, Nome_produto_txf");//                    $this->smarty->assign('produtos', $produtos);//                }                $mensagens = $this->mbc->executa_sql("select * from mensagens where Ativo_sel = 'SIM' order by Id_int DESC LIMIT 1");                $this->smarty->assign('aviso', $mensagens[0]);                break;            case 'produtos':                $configuracao = $this->mbc->buscar_completo('configuracao', "where Id_int is not null limit 1");                $this->smarty->assign('configuracao', $configuracao);                $produtos = $this->mbc->buscar_completo('produtos_integrados', "where Ativo_sel = '1'  order by Nome_produto_txf");                //and Estoque_txf>0//                ver($produtos);//                ver($configuracao);//                    $porcentagem = 1 + ($configuracao[0]->Porcentagem_txf / 100);//                    $porcentagem_revendedor = 1 + ($configuracao[0]->Porcentagem_revendedor_txf / 100);//                    $porcentagem_minimo = 1 + ($configuracao[0]->Porcentagem_minimo_txf / 100);//                    $porcentagem_sugerido = 1 + ($configuracao[0]->Porcentagem_sugerido_txf / 100);//                    ver($porcentagem);                foreach ($produtos as $produto) {                    $produto->Preco_revendedor_txf = number_format($produto->Preco_revendedor_txf, 2, ",", ".");                    $produto->Preco_minimo_txf = number_format($produto->Preco_minimo_txf, 2, ",", ".");                    $produto->Preco_sugerido_txf = number_format($produto->Preco_sugerido_txf, 2, ",", ".");                    $produto->Estoque_css = exibe_estoque($produto->Estoque_txf, $this->usuario->Nivel_sel);//                        ver($produto,1);                }                $this->smarty->assign('produtos', $produtos);//                    if (is_lands()) {//                        //                } else {//                    $produtos = $this->mbc->buscar_completo('produtos', "where Ativo_sel = 'SIM' order by Prioridade_sel = 'SIM' DESC, Nome_produto_txf");//                    $this->smarty->assign('produtos', $produtos);//                }                $mensagens = $this->mbc->executa_sql("select * from mensagens where Ativo_sel = 'SIM' order by Id_int DESC LIMIT 1");                $this->smarty->assign('aviso', $mensagens[0]);                break;            default:                break;        }        $this->smarty->assign("sessao_ci", $this->session->all_userdata());        if (isset($_SESSION)) {            $this->smarty->assign("sessao", $_SESSION);        }    }    function postar() {//ver($this->app->Segmento_padrao_txf );        switch ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {            case 'editar_cadastro':                $this->conecta_mbc($this->app->Conexoes_for);                //ver($this->usuario->Id_int);                if ($this->mbc->updateTable($_POST['Tabela_txf'], $_POST, 'Id_int', $this->usuario->Id_int)) {                    $this->smarty->assign('mensagem', 'edicao_ok');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                } else {                    $this->smarty->assign('mensagem', 'edicao_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                }                break;            default:                break;        }    }}