<?phpif (!defined('BASEPATH'))      exit('No direct script access allowed');require_once(COMMONPATH .        'core/lands_core.php');class acao extends lands_core {      public $autenticacao;      public $consulta = null;      public $where;      public $retorno = 'xml';      function __construct() {            $this->load->library('session');            parent::__construct();            $this->inicia_servidor();            $this->autentica_consulta();            $this->abre_consulta();      }      function inicia_servidor() {            ini_set('memory_limit', '512M');            ini_set('max_execution_time', '700');      }      function index() {            $funcao = $this->pagina_atual;            if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {                  $this->pagina_atual = $this->uri->segment($this->app->Segmento_padrao_txf + 1);                  $funcao = ($this->uri->segment($this->app->Segmento_padrao_txf + 1));            }            if (!method_exists(__CLASS__, $funcao)) {                  $this->carrega_pagina($this->pagina_atual);            } else {//executa uma funcao que deve ser programa nesta classe.                  $this->$funcao();            }      }      function abre_consulta() {            if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {                  $this->consulta = $this->uri->segment($this->app->Segmento_padrao_txf + 1);            } else {                  die('Sem consulta');            }            if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {                  $this->smarty->assign('segment2', $this->uri->segment($this->app->Segmento_padrao_txf + 1));            } else {                  $this->smarty->assign('segment2', '');            }            if ($this->uri->segment($this->app->Segmento_padrao_txf + 2)) {                  $this->smarty->assign('segment3', $this->uri->segment($this->app->Segmento_padrao_txf + 2));            } else {                  $this->smarty->assign('segment3', '');            }            $this->switch_consulta();      }      function switch_consulta() {            $this->conecta_mbc($this->app->Conexoes_for);            echo header("Access-Control-Allow-Origin: *");            switch ($this->consulta) {                  case 'teste_conexao':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();                        $tabelas = $this->mbc->executa_sql("show tables");                        if (count($tabelas > 1)) {                              $dados['resultado'] = 'ok';                        } else {                              $dados['resultado'] = 'erro';                        }                        $dados['mensagem'] = 'ConexÃ£o realizada com sucesso.';                        break;                  case 'buscar_vendas':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();                        $query_antiga = "select p.*,pp.*,c.*,ps.* from pedidos p left outer join pedidos_produtos pp on p.orders_id=pp.orders_idleft outer join clientes c on p.customers_id=c.customers_id left outer join pedidos_status ps on p.orders_status=ps.orders_status_id";                        $vendas = $this->retorna_vendas();                        if (isset($vendas[0])) {                              $dados['total'] = count($vendas);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Consultar vendas realizada com sucesso.';                              $dados['registros'] = $vendas;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'buscar_clientes':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();// $clientes = $this->mbc->executa_sql("select c.*,ce.* from clientes c left outer join clientes_enderecos ce on c.customers_id=ce.customers_id");                        $clientes = $this->retorna_clientes();                        if (isset($clientes[0])) {                              $dados['total'] = count($clientes);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Consultar clientes realizada com sucesso.';                              $dados['registros'] = $clientes;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'buscar_status':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();// $clientes = $this->mbc->executa_sql("select c.*,ce.* from clientes c left outer join clientes_enderecos ce on c.customers_id=ce.customers_id");                        $status = $this->retorna_status();                        if (isset($status[0])) {                              $dados['total'] = count($status);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Consultar status realizada com sucesso.';                              $dados['registros'] = $status;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'buscar_produtos':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();// $clientes = $this->mbc->executa_sql("select c.*,ce.* from clientes c left outer join clientes_enderecos ce on c.customers_id=ce.customers_id");                        $produtos = $this->retorna_produtos();                        if (isset($produtos[0])) {                              $dados['total'] = count($produtos);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Consultar produtos realizada com sucesso.';                              $dados['registros'] = $produtos;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'buscar_categorias':                        $this->checa_nivel_acesso(3);                        $this->where = $this->cria_where();// $clientes = $this->mbc->executa_sql("select c.*,ce.* from clientes c left outer join clientes_enderecos ce on c.customers_id=ce.customers_id");                        $categorias = $this->retorna_categorias();                        if (isset($categorias[0])) {                              $dados['total'] = count($categorias);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Busca por categorias realizada com sucesso.';                              $dados['registros'] = $categorias;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'buscar_tpl':                                               $this->checa_nivel_acesso(3);// $clientes = $this->mbc->executa_sql("select c.*,ce.* from clientes c left outer join clientes_enderecos ce on c.customers_id=ce.customers_id");                        $this->retorna_tpl();                        break;                  case 'atualizar_estoque':                        $this->checa_nivel_acesso(5);                        $produto = $this->atualiza_estoque();                        if (isset($produto[0])) {                              $dados['total'] = count($produto);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Estoque de ' . count($produto) . ' produto atualizado com sucesso.';                              $dados['registros'] = $produto;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'set_produto':                        $this->checa_nivel_acesso(3);                        $produto = $this->insere_atualiza_produto();                        if (isset($produto[0])) {                              $dados['total'] = count($produto);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = ' ' . count($produto) . ' produto inserido/atualizado com sucesso.';                              $dados['registros'] = $produto;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  case 'atualizar_status':                        $this->checa_nivel_acesso(3);                        $venda = $this->atualiza_status();                        if (isset($venda[0])) {                              $dados['total'] = count($venda);                              $dados['resultado'] = 'ok';                              $dados['mensagem'] = 'Status de ' . count($venda) . ' venda atualizado com sucesso.';                              $dados['registros'] = $venda;                        } else {                              $dados['total'] = 0;                              $dados['resultado'] = 'vazio';                              $dados['mensagem'] = 'Nenhum registro encontrado.';                        }                        break;                  default:                        $this->retorna_erro("OperaÃ§Ã£o nÃ£o implementada");                        die();                        break;            }            $this->smarty->assign('resposta', $dados);            $this->retorna($dados);      }      function cria_where($funcao = null) {            $where = '';            if (isset($_REQUEST['parametros'])) {                  $vars = json_decode($_REQUEST['parametros']);                  $where = " where 1=1";                  foreach ($vars as $key => $value) {                        switch ($key) {                              case 'customers_cpf_cnpj':                                    $where.=" and $key='$value'";                                    break;                              case 'products_cod_ref':                                    $where.=" and $key='$value'";                                    break;                              case 'customers_email_address':                                    $where.=" and $key='$value'";                                    break;                              case 'antes_de':                                    $where.=" and date_purchased<'$value'";                                    break;                              case 'data':// nao fumegou                                    $where.=" and date_purchased='$value'";                                    break;                              case 'depois_de':                                    $where.=" and date_purchased>'$value'";                                    break;                              default:                                    $where.=" and $key=$value";                                    break;                        }                  }            }            return $where;      }      function atualiza_estoque() {            $id = null;            $qtd = null;            $array = array();            if (isset($_REQUEST['parametros'])) {                  $vars = json_decode($_REQUEST['parametros']);                  foreach ($vars as $key => $value) {                        switch ($key) {                              case 'products_id':                                    $id = $value;                                    break;                              case 'products_quantity':                                    $qtd = $value;                                    break;                        }                  }            }//verifica os parÃ¢metros            if (($qtd == null) || ($id == null)) {                  $this->retorna_erro("ParÃ¢metros producs_id e products_quantity sÃ£o OBRIGATÃRIOS");                  die();            }//verifica se o produto existe            $registro = $this->mbc->executa_sql("select * from produtos where products_id=$id");            if (!isset($registro[0])) {                  $this->retorna_erro("Produto nÃ£o encontrado");            }//$query = "update produtos set products_quantity=$qtd where products_id=$id";//products_cod_ref            $array = object_to_array($vars);            unset($array['products_id']);            $this->mbc->updateTable('produtos', $vars, 'products_id', $id);            $registro = $this->mbc->executa_sql("select * from produtos where products_id=$id");            return $registro;      }      function monta_objeto_produto() {            /*              echo '<br>******************** debug POST *******************<br>';              echo '        <br><br><pre>';              if ($_POST) {              print_r($_POST);              } else {              print_r('empty');              }              echo '    <br>    <br></pre><br>*************** encerrou o debug ***************<br><br><br>';              die('programa encerrado propositalmente');             */// verifica se existe o parametro produto            if (isset($_REQUEST['produto'])) {                  $produto_post = $_REQUEST['produto'];            } else {                  $produto_post = $_POST;                  if (isset($produto_post['usuario'])) {                        unset($produto_post['usuario']);                  }                  if (isset($produto_post['senha'])) {                        unset($produto_post['senha']);                  }            }            $produto = new stdClass();//verifica se foi enviado como array ou json            if (is_array($produto_post)) {//converte para objeto                  foreach ($produto_post as $key => $value) {                        $produto->$key = $value;//$produto->$key = utf8_decode($value);                  }            } else {//converte de json para objeto                  $produto = json_decode($produto_post);            }            return $produto;      }      function insere_atualiza_produto() {            $produto = $this->monta_objeto_produto();//verifica se foi passado o parametro cod_ref            if (!isset($produto->products_cod_ref)) {                  $this->retorna_erro("ParÃ¢metro products_cod_ref Ã© obrigatÃ³rio");            }//verifica se o produto existe            $registro = $this->mbc->executa_sql("select * from produtos where products_cod_ref='$produto->products_cod_ref'");            if (isset($registro[0])) {//se existir atualiza                  $resposta = $this->atualiza_produto($produto);            } else {//se nao existir insere                  $resposta = $this->insere_produto($produto);            }            return $resposta;      }      function atualiza_produto($produto) {//insere os campos ocultos padrÃ£o do produto            $this->insere_valores_padrao($produto);            $code_ref = $produto->products_cod_ref;//converte o objeto em array para inserir            $array = object_to_array($produto);            unset($array['products_id']);            $this->mbc->updateTable('produtos', $array, 'products_cod_ref', $code_ref);//busca o objeto atualizado para retorno            $registro = $this->mbc->executa_sql("select * from produtos where products_cod_ref='$code_ref'");            return $registro;      }      function insere_produto($produto) {//insere os campos ocultos padrÃ£o do produto NOVO            $this->insere_valores_padrao($produto, 'novo');            $code_ref = $produto->products_cod_ref;//converte o objeto em array para inserir            $array = object_to_array($produto);            unset($array['products_id']);            $this->mbc->db_insert('produtos', $array);//busca o objeto inserido para retorno            $registro = $this->mbc->executa_sql("select * from produtos where products_cod_ref='$code_ref'");            return $registro;      }      function insere_valores_padrao($produto, $novo = null) {            $produto->language_id = 4;            $produto->products_additionalinfo = "#";            if ($novo) {                  $produto->products_date_added = date('Y-m-d H:i:s');                  $produto->products_image = 'imagemindisponivel.jpg';                  $produto->products_image_med = 'imagemindisponivel.jpg';            }            $produto->products_last_modified = date('Y-m-d H:i:s');            return $produto;      }      function retorna_status() {//   $array = array();            $status = $this->mbc->executa_sql("select p.* from pedidos_status p " . $this->where);//            //  ver($produtos);//            foreach ($produtos as $produto) {//                  $produto->categorias = array();//                  $produto->categorias = $this->mbc->executa_sql("select c.* from categorias c left outer join produtos_categorias pc on pc.categories_id=c.categories_id where products_id=" . $produto->products_id);//                  $array[] = $produto;//            }//            return $array;            return $status;      }      function atualiza_status() {            $id = null;            $status = null;            $array = array();            if (isset($_REQUEST['parametros'])) {                  $vars = json_decode($_REQUEST['parametros']);                  foreach ($vars as $key => $value) {                        switch ($key) {                              case 'orders_id':                                    $id = $value;                                    break;                              case 'orders_status':                                    $status = $value;                                    break;                        }                  }            }//verifica os parÃ¢metros            if (($status == null) || ($id == null)) {                  $this->retorna_erro("ParÃ¢metros orders_id e orders_status sÃ£o OBRIGATÃRIOS");                  die();            }//verifica se o produto existe            $registro = $this->mbc->executa_sql("select * from pedidos where orders_id=$id");            if (!isset($registro[0])) {                  $this->retorna_erro("Venda nÃ£o encontrada");            }//$query = "update produtos set products_quantity=$qtd where products_id=$id";//products_cod_ref            $array = object_to_array($vars);            unset($array['orders_id']);            $this->mbc->updateTable('pedidos', $vars, 'orders_id', $id);            $registro = $this->mbc->executa_sql("select * from pedidos where orders_id=$id");            return $registro;      }      function retorna_vendas() {            $array = array();            $query = "select ";            $query.="cli.customers_tipo_pessoa, cli.customers_cpf_cnpj, cli.customers_rg, cli.customers_rg ";            $query.=",cli_e.entry_inscricao_estadual ";            $query.= ", p.*, ps.* ";//campos extras            $query.=" from pedidos p left outer join pedidos_status ps on p.orders_status=ps.orders_status_id ";            $query.=" left outer join clientes cli on cli.customers_id=p.customers_id ";            $query.=" left outer join clientes_enderecos cli_e on cli_e.customers_id=p.customers_id ";            $query.=$this->where;            $query.= " and payment_method!='' ";//            $query.= " limit 50";            $vendas = $this->mbc->executa_sql($query);//            ver($vendas);            foreach ($vendas as $venda) {                  $venda->cliente = array();//                  $wherecli = " where 1=1 and customers_id=" . $venda->customers_id;//                  $cli = $this->retorna_clientes(FALSE, $wherecli);//                  $venda->cliente = $cli[0];                  $venda->produtos = array();                  $venda->produtos = $this->mbc->executa_sql("select * from pedidos_produtos where orders_id=" . $venda->orders_id);                  $venda->fretes = array();                  $venda->fretes = $this->mbc->executa_sql("select * from pedidos_totalizacao where orders_id=" . $venda->orders_id);                  $array[] = $venda;            }            return $array;      }      function retorna_clientes($busca_endereco = TRUE, $where = null) {            if ($where == null) {                  $where = $this->where;            }            $array = array();            $clientes = $this->mbc->executa_sql("select c.* from clientes c" . $where);            if ($busca_endereco == TRUE) {                  foreach ($clientes as $cliente) {                        $cliente->enderecos = array();                        $cliente->enderecos = $this->mbc->executa_sql("select * from clientes_enderecos where customers_id=" . $cliente->customers_id);                        $array[] = $cliente;                  }                  return $array;            } else {                  return $clientes;            }      }      function retorna_produtos() {            $array = array();            $produtos = $this->mbc->executa_sql("select p.* from produtos p " . $this->where);//  ver($produtos);            foreach ($produtos as $produto) {                  $produto->categorias = array();                  $produto->categorias = $this->mbc->executa_sql("select c.* from categorias c left outer join produtos_categorias pc on pc.categories_id=c.categories_id where products_id=" . $produto->products_id);                  $array[] = $produto;            }            return $array;//return $produtos;      }      function retorna_tpl() {                         if (!isset($_REQUEST['tpl'])) {                  $this->retorna_erro("Faltando parametro tpl");            }                                               $tpl=$_REQUEST['tpl'];                        $this->smarty->assign('retorno', $dados);            $resposta = $this->model_smarty->retorna_tpl("tpl_retorno/" . $tpl, $this->app->Template_txf);            print_r($resposta);            die();      }      function retorna_categorias() {            $array = array();            $sql = "select c.* from categorias c where parent_id=0 order by sort_order";            $categorias = $this->mbc->executa_sql($sql);            foreach ($categorias as $categoria) {                  $categoria->subcategorias = array();                  $sql_sub = "select c.* from categorias c where parent_id={$categoria->categories_id} order by sort_order";                  $subcategorias = $this->mbc->executa_sql($sql_sub);                  $categoria->subcategorias = $subcategorias;            }            return $categorias;      }      function retorna($data) {            if (isset($_REQUEST['retorno'])) {                  $this->retorno = $_REQUEST['retorno'];            }            $this->load->library('Format');            $dados = object_to_array($data);            switch ($this->retorno) {                  case 'xml':                        echo header("Content-type: text/xml; charset=utf-8");                        $resposta = $this->format->to_xml($dados);                        print_r($resposta);                        die();                        break;                  case 'html':                        $this->smarty->assign('retorno', $dados);                        $resposta = $this->model_smarty->retorna_tpl("consultar", $this->app->Template_txf);                        print_r($resposta);                        die();                        break;                  case 'tpl'://                        echo header("Content-Type: application/json; charset=UTF-8");                        $this->smarty->assign('retorno', $dados);                        $resposta = $this->model_smarty->retorna_tpl("tpl_retorno/" . $this->consulta, $this->app->Template_txf);                        print_r($resposta);                        die();                        break;                  case 'json':                        echo header("Content-Type: application/json; charset=UTF-8");                        $resposta = json_encode($dados);                        print_r($resposta);                        die();                        break;                  case 'array':                        $resposta = $dados;                        print_r($resposta);                        die();                        break;            }      }      function autentica_consulta() {            $autentica = true;            if (!isset($_REQUEST['usuario'])) {                  $autentica = false;            }            if (!isset($_REQUEST['senha'])) {                  $autentica = false;            }            if ($autentica == false) {                  $this->retorna_falha_autenticacao('UsuÃ¡rio e senha nÃ£o foram passados na requisiÃ§Ã£o.');            }            $usuario = $_REQUEST['usuario'];            $senha = $_REQUEST['senha'];            if (!$this->verifica_usuario_senha($usuario, $senha))                  $this->retorna_falha_autenticacao();      }      function verifica_usuario_senha($usuario, $senha) {            $sql = "select * from usuarios where Login_txf='$usuario' and Senha_txp='$senha'";            if ($usuario != 'lands' && $senha != 'lands') {                  $sql.="and Lands_id='" . $this->app->Lands_id . "'";            }            $autentica = $this->model_banco->executa_sql($sql);            if (isset($autentica[0]->Id_int)) {                  $this->autenticacao = $autentica[0];                  return true;            }            return false;      }      function retorna_falha_autenticacao($mensagem = 'Falha de autenticaÃ§Ã£o') {            $dados['resultado'] = 'erro';            $dados['mensagem'] = $mensagem;            $this->retorna($dados);      }      function retorna_erro($mensagem = 'ParÃ¢metros invÃ¡lidos') {            $dados['resultado'] = 'erro';            $dados['mensagem'] = $mensagem;            $this->retorna($dados);      }      function checa_nivel_acesso($nivel) {            if ($this->autenticacao->Nivel_sel >= $nivel) {                  return true;            } else {                  $this->retorna_erro("VocÃª nÃ£o tem permissÃ£o para acessar este metodo.");            }      }}