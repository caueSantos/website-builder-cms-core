<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');require_once(COMMONPATH .        'libraries/REST_Controller.php');//error_reporting(E_ALL);//ini_set('display_errors', 1);class rest extends REST_Controller {    public $cadastro;    public $configuracoes;    function __construct() {        parent::__construct();        //        header("Access-Control-Allow-Origin: *", true);//        header("Access-Control-Allow-Credentials: true", true);//        header("Access-Control-Allow-Methods: OPTIONS, GET, POST", true);        header("Access-Control-Allow-Headers: x-api-key, x-senha, x-usuario", true);        header("Access-Control-Max-Age: 842100", true);        $this->response->format = 'json';        $funcao = $this->router->method;        $funcao.="_";        $funcao.=$this->request->method;        $this->funcao = $funcao;        if ($this->funcao != 'cadastros_post' && $this->funcao != 'clinicas_post') {            $this->autentica();        }    }    function autentica() {//        ver($this->metodo); //        ver('chegou no autentica');        if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {            $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'ok'), 200);        }        if (!$_SERVER['HTTP_X_SENHA'] || !$_SERVER['HTTP_X_USUARIO']) {            $this->response(array('codigo' => 403, 'status' => 'error', 'error' => 'x-usuario and x-senha são requeridos no cabeçalho.'), 200);        }        $senha = $_SERVER['HTTP_X_SENHA'];        $usuario = $_SERVER['HTTP_X_USUARIO'];        if ($this->app->Lands_id != 'labcloud') {            $cadastro = $this->mbc->executa_sql("select * from cadastros where Login_txf='{$usuario}' and Senha_txf='{$senha}'");        } else {            $cadastro = $this->mbc->executa_sql("select * from configuracoes where Login_txf='{$usuario}' and Senha_txf='{$senha}'");        }        if ($cadastro[0]->Id_int) {            if ($cadastro[0]->Ativo_sel != 'SIM') {                $this->response(array('codigo' => 403, 'status' => 'error', 'error' => 'Cadastro inativo, consulte o laboratório.'), 200);            } else {                $this->cadastro = $cadastro[0];            }        } else {            $this->response(array('codigo' => 403, 'status' => 'error', 'error' => 'Usuário e senha inválidos.'), 200);        }    }    function teste_get() {        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Conexão estabelecida corretamente'), 200);    }    function login_get() {        unset($this->cadastro->Solicitacoes_vin);        $this->cadastro->urlLab = $this->app->Url_cliente . 'rest/';        $this->cadastro->id = $this->cadastro->Id_int;        $this->cadastro->email = $this->cadastro->Email_txf;        $this->cadastro->login = $this->cadastro->Login_txf;        $this->cadastro->senha = $this->cadastro->Senha_txf;        if ($this->cadastro->Tipo_pessoa_txf == 'F') {            $this->cadastro->nome = $this->cadastro->Nome_txf;        } else {            $this->cadastro->nome = $this->cadastro->Nome_fantasia_txf;        }        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Login Aceito', 'data' => $this->cadastro), 200);    }    function erro_get() {        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Usuário não autenticado!'), 200);    }    function empresas_get() {        $this->conecta_mbc(103);        $empresas = $this->mbc->buscar_completo("empresas", " where Ativo_sel='SIM'");        if (isset($empresas[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $empresas), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function empresa_get() {        $this->conecta_mbc(103);        $where = "where Ativo_sel='SIM' ";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_int='$id'";        }        $empresas = $this->mbc->buscar_completo("empresas", " $where");        $caminho = "https://app.labcloud.com.br/painel/{$empresas[0]->Imagens[0]->Caminho_txf}";        $type = pathinfo($caminho, PATHINFO_EXTENSION);        if ($empresas[0]->Imagens[0]->Caminho_txf) {            $empresas[0]->Imagem = 'data:image/' . $type . ';base64,' . base64_encode(file_get_contents($caminho));        }        unset($empresas[0]->Imagens);        unset($empresas[0]->Videos);        unset($empresas[0]->Logo_ico);        unset($empresas[0]->Arquivos);        unset($empresas[0]->Notas);        unset($empresas[0]->Tags);        if (isset($empresas[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $empresas[0]), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function exames_completo_get() {        $where = '';        $categorias = $this->mbc->executa_sql("select * from categorias_exames where Id_int is not null $where");        foreach ($categorias as $categoria) {            $where = " and Categoria_sel='{$categoria->Apelido_txf}'";            $categoria->Exames = $this->mbc->executa_sql("select * from exames where Ativo_sel='SIM' $where");        }        if (isset($categorias[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $categorias), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function exames_get() {        $where = '';        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where = " and Id_int='$id'";        }        $exames = $this->mbc->executa_sql("select * from exames where Ativo_sel='SIM' $where");        if (isset($exames[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $exames), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function avisos_get() {        $where = '';        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where = " and Id_int='$id'";        }        $avisos = $this->mbc->buscar_completo("avisos", " where Ativo_sel='SIM' $where");        foreach ($avisos as $aviso) {            $aviso->Mensagem_txa = ignora_tags(strip_tags(html_entity_decode($aviso->Mensagem_txa)));            unset($aviso->Imagens);            unset($aviso->Arquivos);            unset($aviso->Videos);            unset($aviso->Notas);            unset($aviso->Imagens_ico);            unset($aviso->Arquivos_arq);            unset($aviso->Tags);        }        if (isset($avisos[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $avisos), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function materiais_get() {        $materiais = $this->mbc->executa_sql("select * from materiais where Ativo_sel='SIM' order by Nome_txf ");        if (isset($materiais[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $materiais), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function cadastro_get() {        $id = $this->cadastro->Id_int;        $where = " and Id_int='$id'";        $cadastros = $this->mbc->executa_sql("select * from cadastros where Ativo_sel='SIM' $where");        if (isset($cadastros[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $cadastros), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'Cadastro não encontrado!'), 200);        }    }    function categorias_exames_get() {        $where = '';        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where = " and Id_int=$id";        }        $exames = $this->mbc->executa_sql("select * from categorias_exames where Id_int is not null $where");        if (isset($exames[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $exames), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 200);        }    }    function busca_configuracoes() {        if ($this->mbc->tabelaexiste('configuracoes')) {            $config = $this->mbc->executa_sql("select * from configuracoes");        } else {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Tabela configurações não encontrada!'), 200);        }        if ($config[0]->Id_int) {            $this->configuracoes = $config[0];        } else {            $this->configuracoes->Email_exames_txf = 'gustavo.vedana@landsdigital.com.br';            $this->configuracoes->Email_materiais_txf = 'gustavo.vedana@landsdigital.com.br';        }        $this->conecta_mbc(103);        $where = "where Lands_id='{$this->app->Lands_id}'";        $empresas = $this->mbc->executa_sql("select * from empresas {$where}");        if ($empresas[0]) {            $this->empresa = $empresas[0];        }        $this->conecta_mbc($this->app->Conexoes_for);    }    function resultados_solicitacao_get() {        $where = "where Id_cadastro ='{$this->cadastro->Id_int}'";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_solicitacao='$id'";        } else {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Id da solicitação é obrigatoria!'), 200);        }        $sql = "select r.*, CONCAT( '{$this->app->Url_cliente}usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/', r.Arquivo_txf ) AS Caminho_txf from resultados r  $where";        $resultados = $this->mbc->executa_sql($sql);        if (isset($resultados[0])) {            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $resultados), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'Nenhum resultado encontrado!'), 200);        }    }    function resultados_get() {        $this->busca_configuracoes();        switch ($this->empresa->Tipo_resultado_sel) {            case 'ftp':                if ($this->conecta_ftp($this->app->Conexao_ftp_for)) {                    $pasta = $this->cadastro->Login_txf . '-' . $this->cadastro->Senha_txf;                    $pasta = $this->configuracoes_ftp->Path_txf . $pasta;                    $lista = $this->ftp->lista_detalhada($pasta);                    if ($this->app->Lands_id == 'labdemo') {                        $server = 'demos.landsdigital.com.br/labcloud';                    } else {                        $server = $_SERVER['SERVER_NAME'];                    }                    $resultados = array();                    foreach ($lista as $resultado) {                        $objeto = new stdClass();                        $objeto->Id_cadastro = $this->cadastro->Id_int;                        $objeto->Arquivo_txf = $resultado->name;                        $objeto->Animal_txf = 'desconhecido';                        $objeto->Id_ficha = 'desconhecido';                        $objeto->Ano_req_exame = 'desconhecido';                        $objeto->Proprietario_txf = 'desconhecido';                        $objeto->Nome_txf = $resultado->name;                        $objeto->Caminho_txf = "https://{$server}/usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/{$resultado->name}";                        $objeto->Data_dat = date("Y-m-d H:i:s", $resultado->date);                        $resultados[] = $objeto;                    }                    sorteia_array_objetos($resultados, array('Data_dat' => SORT_DESC));                    $i = 0;                    foreach ($resultados as $resultado) {                        $i = $i + 1;                        if ($i < 200) {                            $resultados_finais[] = $resultado;                        }                    }//                    ver($resultados_finais);                    $this->response(array('codigo' => 200, 'status' => 'success', 'data' => array_values($resultados_finais)), 200);                } else {                    $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'Erro ao conectar no ftp!'), 200);                }                break;            default:                $where = "where Id_cadastro ='{$this->cadastro->Id_int}'";                if ($this->uri->segment(3)) {                    $id = $this->uri->segment(3);                    $where.= " and Id_ficha='$id'";                }                $sql = "select r.*, CONCAT( '{$this->app->Url_cliente}usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/', r.Arquivo_txf ) AS Caminho_txf from resultados r  $where";                $resultados = $this->mbc->executa_sql($sql);                if (isset($resultados[0])) {                    $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $resultados), 200);                } else {                    $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'Nenhum resultado encontrado!'), 200);                }                break;        }    }    function busca_empresa() {        $this->conecta_mbc(103);        $where = "where Ativo_sel='SIM' ";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_int='$id'";        }        $empresas = $this->mbc->buscar_completo("empresas", " $where");        $caminho = "https://app.labcloud.com.br/painel/{$empresas[0]->Imagens[0]->Caminho_txf}";        $type = pathinfo($caminho, PATHINFO_EXTENSION);        if ($empresas[0]->Imagens[0]->Caminho_txf) {            $empresas[0]->Imagem = 'data:image/' . $type . ';base64,' . base64_encode(file_get_contents($caminho));        }    }    function dispara_push($resultado = null, $tipo = null) {        $aparelhos_android = array();        $aparelhos_ios = array();        $resultado = array_to_object($resultado);        $aparelhos = $this->mbc->executa_sql("select * from push where Id_cliente_txf={$this->cadastro->Id_int}");        if ($aparelhos[0]) {            $texto_msg = new stdClass();            $additionalData = [];            switch ($tipo) {                case 'atualiza_resultado':                    $texto_msg->Titulo = "Laudo Atualizado";                    $texto_msg->Texto = "Animal: {$resultado->Animal_txf} Proprietário: {$resultado->Proprietario_txf}";                    if ($this->app->Lands_id == 'labdemo') {                        $server = 'demos.landsdigital.com.br/labcloud';                    } else {                        $server = $_SERVER['SERVER_NAME'];                    }                    $additionalData['resultado'] = "https://{$server}/usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/{$resultado->Arquivo_txf}";                    break;                case 'insere_resultado':                    $texto_msg->Titulo = "Novo Laudo Disponível";                    $texto_msg->Texto = "Animal: {$resultado->Animal_txf} Proprietário: {$resultado->Proprietario_txf}";                    break;                default:                    break;            }            foreach ($aparelhos as $aparelho) {                switch ($aparelho->Sistema_txf) {                    case 'android':                        $aparelhos_android[] = $aparelho->Device_token_txf;                        break;                    case 'ios':                        $aparelhos_ios[] = $aparelho->Device_token_txf;                        break;                    default:                        break;                }            }            if ($aparelhos_android[0]) {                $this->push_android($aparelhos_android, $texto_msg, $additionalData);            }            if ($aparelhos_ios[0]) {                $this->push_ios($aparelhos_ios, $texto_msg);            }        }    }    function push_ios($registrationIds, $texto_msg) {        foreach ($registrationIds as $aparaelho) {// Put your device token here (without spaces):            $deviceToken = $aparaelho;// Put your private key's passphrase here:            $passphrase = 'labcloud';// Put your alert message here:            $title = $texto_msg->Titulo;            $message = $texto_msg->Texto;////////////////////////////////////////////////////////////////////////////////d            $ctx = stream_context_create();            stream_context_set_option($ctx, 'ssl', 'local_cert', COMMONPATH . 'modules/rest/certificado/labcloud.pem');            stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);// Open a connection to the APNS server            $fp = stream_socket_client('ssl://gateway.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT, $ctx);            if (!$fp)                exit("Failed to connect: $err $errstr" . PHP_EOL);            // echo 'Connected to APNS' . PHP_EOL;// Create the payload body            $body['aps'] = array(                'alert' => array(                    'title' => $title,                    'body' => $message,                // 'action-loc-key' => 'Bango App',                ),                'badge' => 2,                'sound' => 'oven.caf',            );// Encode the payload as JSON            $payload = json_encode($body);// Build the binary notification            $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;// Send it to the server            $result = fwrite($fp, $msg, strlen($msg));//            if (!$result)//                echo 'Message not delivered' . PHP_EOL;//            else//                echo 'Message successfully delivered' . PHP_EOL;// Close the connection to the server            fclose($fp);        }    }    function push_android($registrationIds, $texto_msg, $additionalData = []) {        define('API_ACCESS_KEY', 'AIzaSyCaaRnV7qYA0Cf9vLpiYBCYqe54hMvjO_8'); // API access key from Google API's Console        $data = array(            'title' => $texto_msg->Titulo,            'body' => $texto_msg->Texto,            'vibrate' => 1,            'sound' => 1,            'priority' => 2,            'content-available' => 1        );        if (!empty($additionalData)) {            $data = array_merge($data, $additionalData);        }                $fields = array(            'registration_ids' => $registrationIds,            'data' => $data        );        $headers = array(            'Authorization: key=' . API_ACCESS_KEY,            'Content-Type: application/json'        );        $ch = curl_init();        curl_setopt($ch, CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send');        curl_setopt($ch, CURLOPT_POST, true);        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));        $result = curl_exec($ch);        curl_close($ch);    }    function solicitacao_materiais_post() {        $this->busca_configuracoes();        $usuario = $this->cadastro;        if ($usuario->Tipo_pessoa_txf == 'F') {            $clinica = $usuario->Nome_txf;        } else {            $clinica = $usuario->Nome_fantasia_txf;        }        $this->smarty->assign('usuario', $usuario);        $email = $_POST;        $this->load->model('model_mail');        $this->model_mail->inicializa($this->app, $this->cliente);        date_default_timezone_set('America/Sao_Paulo');        $this->load->library('validacao');        $rules = array(            array('field' => 'Responsavel_txf', 'label' => 'Responsavel_txf', 'rules' => 'trim|required')        );        $this->validacao->set_rules($rules);        if ($this->validacao->run('materiais_post') != false) {            $mat = $_POST['Materiais'];            $this->conecta_mbc($this->app->Conexoes_for);            $materiais = $this->mbc->executa_sql("select * from materiais");            $materiais_escolhidos = array();            foreach ($materiais as $material) {                foreach ($mat as $key => $value) {                    if ($material->Id_int == $key && $value != '') {                        $material->Quantidade_txf = $value;                        $materiais_escolhidos[] = $material;                    }                }            }            $email['Email_txf'] = $usuario->Email_txf;            $email['materiais'] = $materiais_escolhidos;            $this->smarty->assign('usuario', array_to_object($email['usuario']));            $this->smarty->assign('materiais', array_to_object($email['materiais']));            $email['Nome_txf'] = $usuario->Nome_txf;            $email['Assunto_txf'] = "Solicitação de Materiais - " . $this->app->Nome_app_txf;            $email['Destinatario_txf'] = $this->configuracoes->Email_materiais_txf;            date_default_timezone_set('America/Sao_Paulo');            $solicitacao = $_POST;            $solicitacao['Data_dat'] = date("Y-m-d");            $solicitacao['Hora_txf'] = date("H:i:s");            $solicitacao['Clinica_txf'] = $clinica;            $solicitacao['Id_objeto_con'] = $usuario->Id_int;            $solicitacao['Tabela_con'] = 'cadastros';            $solicitacao['Origem_txf'] = 'rest';            $solicitacao['Materiais_txa'] = json_encode($materiais_escolhidos);            $tpl = $this->model_smarty->retrurn_email('materiais', $this->app->Template_txf);            $solicitacao['Solicitacao_txa'] = $tpl;            if ($this->mbc->db_insert('solicitacoes_materiais', $solicitacao)) {                $resposta = $this->mbc->executa_sql("select Id_int, Data_dat,Hora_txf,Clinica_txf,Id_objeto_con,Tabela_con from solicitacoes_materiais where Id_objeto_con={$this->cadastro->Id_int} order by Id_int desc limit 1");//                unset($resposta[0]->Solicitacao_txa);//                unset($resposta[0]->Materiais_txf);                if ($resposta[0]->Id_int) {                    $resposta[0]->Materiais = $materiais_escolhidos;                    if ($this->model_mail->envia_email_tpl($email, 'materiais')) {//                        ver('enviou o emeio');                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Solicitação enviada com sucesso', 'data' => $resposta), 200);                    } else {//                        ver('nao enviou email');                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao enviar email!'), 200);                    }                } else {                    //ver('nao tem resposta id int');                    $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                }            } else {                //ver('nao inseriu');                $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);            }        } else {            $this->response(array('codigo' => 403, 'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 200);        }    }    function solicitacao_exames_post() {        $rules = array(            array('field' => 'Ficha_txf', 'label' => 'Ficha_txf', 'rules' => 'trim|required'),            array('field' => 'Paciente_txf', 'label' => 'Paciente_txf', 'rules' => 'trim|required'),            array('field' => 'Idade_txf', 'label' => 'Idade_txf', 'rules' => 'trim|required'),            array('field' => 'Especie_txf', 'label' => 'Especie_txf', 'rules' => 'trim|required'),            array('field' => 'Raca_txf', 'label' => 'Raca_txf', 'rules' => 'trim|required'),            array('field' => 'Sexo_txf', 'label' => 'Sexo_txf', 'rules' => 'trim|required'),            array('field' => 'Proprietario_txf', 'label' => 'Proprietario_txf', 'rules' => 'trim|required'),            array('field' => 'Responsavel_txf', 'label' => 'Responsavel_txf', 'rules' => 'trim|required'),            array('field' => 'Crmv_txf', 'label' => 'Crmv_txf', 'rules' => 'trim|required'),//            array('field' => 'Observacoes_txa', 'label' => 'Observacoes_txa', 'rules' => 'trim|required'),            array('field' => 'Exames', 'label' => 'Exames', 'rules' => 'trim|required'),        );        $this->busca_configuracoes();        $usuario = $this->cadastro;        $this->smarty->assign('usuario', $usuario);        $email = $_POST;        $exames_solicitados = explode(',', $_POST['Exames']);        $this->smarty->assign('origem', 'rest');//        $exames_categorias = $this->mbc->buscar_completo("categorias_exames");        $exames = $this->mbc->buscar_tudo("exames", "where Ativo_sel='SIM' order by Categoria_sel,Exame_txf");        $exames_finais = array();        foreach ($exames as $exame) {            if (in_array($exame->Id_int, $exames_solicitados)) {                $exames_finais[] = $exame;            }        }        $array_exames = array();        foreach ($exames_finais as $examinho) {            $categ = $examinho->Categoria_sel;            $array_exames[$categ][] = $examinho->Exame_txf . ' ' . $examinho->Amostra_txf . ' ' . $examinho->Qtde_txf;        }//        ver($array_exames);        $this->smarty->assign('exames', $array_exames);        if ($usuario->Tipo_pessoa_txf == 'F') {            $clinica = $usuario->Nome_txf;        } else {            $clinica = $usuario->Nome_fantasia_txf;        }        $email['Nome_txf'] = $clinica;        $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;        $email['Email_txf'] = $usuario->Email_txf;        $email['Destinatario_txf'] = $this->configuracoes->Email_exames_txf;        $email['Exames'] = $array_exames;        date_default_timezone_set('America/Sao_Paulo');        $solicitacao = $_POST;        $solicitacao['Data_dat'] = date("Y-m-d");        $solicitacao['Hora_txf'] = date("H:i:s");        $solicitacao['Clinica_txf'] = $clinica;        $solicitacao['Id_objeto_con'] = $usuario->Id_int;        $solicitacao['Tabela_con'] = 'cadastros';        $solicitacao['Origem_txf'] = 'rest';//        if ($this->valida_extra()) {//            $extras = $this->busca_extras();//            $this->smarty->assign('extras', $extras);//        }////        if ($_POST['pontos']) {//            $pontos = $_POST['pontos'];//            $this->smarty->assign('pontos', $pontos);//        }        $tpl = $this->model_smarty->retrurn_email('exames', $this->app->Template_txf);//        ver($tpl);//ver($tpl);        $solicitacao['Solicitacao_txa'] = $tpl;        $this->load->library('validacao');        $this->validacao->set_rules($rules);        if ($this->validacao->run('resultados_post') != false) {            if ($this->mbc->db_insert('solicitacoes', $solicitacao)) {                $resposta = $this->mbc->executa_sql("select Id_int, Data_dat, Hora_txf, Proprietario_txf, Paciente_txf, Ficha_txf from solicitacoes where Id_objeto_con={$this->cadastro->Id_int} order by Id_int desc limit 1");//            $resposta = $this->mbc->executa_sql("select * from solicitacoes where Id_objeto_con={$this->cadastro->Id_int} order by Id_int desc limit 1");                if ($resposta[0]->Id_int) {                    $resposta[0]->Exames = $exames_finais;                    $this->load->model('model_mail');                    $this->model_mail->inicializa($this->app, $this->cliente);                    if ($this->model_mail->envia_email_tpl($email, 'exames')) {                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Solicitação enviada com sucesso', 'data' => $resposta), 200);                    } else {                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao enviar email!'), 200);                    }                } else {                    $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                }            } else {                $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);            }        } else {            $this->response(array('codigo' => 403, 'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 200);        }    }    function solicitacoes_get() {        $where = "where Id_objeto_con='{$this->cadastro->Id_int}'";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_int='$id'";        }        $solicitacoes = $this->mbc->executa_sql("select * from solicitacoes $where");        if (isset($solicitacoes[0])) {            $exames = $this->mbc->buscar_tudo("exames", "where Ativo_sel='SIM' order by Categoria_sel,Exame_txf");            foreach ($solicitacoes as $solicitacao) {                unset($solicitacao->Solicitacao_txa);                $exames_solicitados = explode(',', $solicitacao->Exames);//        $exames_categorias = $this->mbc->buscar_completo("categorias_exames");                $solicitacao->Lista_exames = array();                foreach ($exames as $exame) {                    if (in_array($exame->Id_int, $exames_solicitados)) {                        $solicitacao->Lista_exames[] = $exame;                    }                }            }            $this->response(array('codigo' => 200, 'status' => 'success', 'data' => $solicitacoes), 200);        } else {            $this->response(array('codigo' => 404, 'status' => 'error', 'message' => 'Nenhuma solicitação encontrada!'), 200);        }    }    function grava_log($dados) {        $data = array();        if (isset($dados)) {            if (is_array($dados)) {                foreach ($dados as $c => $v) {                    $data[] = $c . ': ' . $v;                }            }        }        $data[] = '-------------------------------------';        $output = implode("\n", $data);        $this->load->helper('file');        write_file(FCPATH . $this->app->Lands_id . "_" . date("Y-m-d_h_i_s") . ".txt", $output);    }    function device_post() {        date_default_timezone_set('America/Sao_Paulo');        $device = $_POST;        $device['Atualizacao_dat'] = date("Y-m-d H:i:s");        /* GRAVA LOG */        /*          $data = array();          if (isset($device)) {          if (is_array($device)) {          foreach ($device as $c => $v) {          $data[] = $c . ': ' . $v;          }          }          }          $data[] = '-------------------------------------';          $output = implode("\n", $data);          $this->load->helper('file');          write_file(FCPATH . $this->app->Lands_id . "_" . date("Y-m-d_h_i_s") . ".txt", $output);         */        $this->load->library('validacao');        $rules = array(            array('field' => 'Id_cliente_txf', 'label' => 'Id_cliente_txf', 'rules' => 'required'),            array('field' => 'Sistema_txf', 'label' => 'Sistema_txf', 'rules' => 'required'),            array('field' => 'Device_token_txf', 'label' => 'Device_token_txf', 'rules' => 'required'),        );        $this->validacao->set_rules($rules);        if ($this->mbc->tabelaexiste('push')) {            if ($this->validacao->run('resultados_post') != false) {                $token = $device['Device_token_txf'];                $device_registrado = $this->mbc->executa_sql("select * from push where Device_token_txf='{$token}' ");                if ($device_registrado[0]) {                    if ($this->mbc->updateTable('push', $device, 'Device_token_txf', $token)) {                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Device atualizado com sucesso'), 200);                    } else {                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao atualizar device!'), 200);                    }                } else {                    $device['Criacao_dat'] = date("Y-m-d H:i:s");                    if ($this->mbc->db_insert('push', $device)) {                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Novo dispositivo salvo com sucesso'), 200);                    } else {                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao salvar device!'), 200);                    }                }            } else {                $this->response(array('codigo' => 400, 'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 200);            }        } else {            $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Tabela push não encontrada!'), 200);        }    }    function cadastros_post() {        $this->postar_cadastro();    }    function clinicas_post() {        $this->postar_cadastro();    }    function postar_cadastro() {//        $usuario = $this->cadastro;        date_default_timezone_set('America/Sao_Paulo');        $cadastro = $_POST;        $cadastro['Atualizacao_dat'] = date("Y-m-d H:i:s");//        if (!is_lands()) {        //  $this->response(array('status' => 'error', 'message' => 'Aguarde,função em desenvolvimento!'), 200);//        }         if (!$this->mbc->campoexiste("Id_sistema_txf", "cadastros_teste")) {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Campo Id_sistema_txf não existe neste laboratório, impossível utilizar esta função!'), 200);        }        if (!$_POST) {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Nenhum campo enviado!'), 200);        }        if (!$_POST['Id_sistema_txf']) {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Id_sistema_txf obrigatorio!'), 200);        }        $id_sistema = $_POST['Id_sistema_txf'];        $res = $this->mbc->executa_sql("select * from cadastros_teste where Id_sistema_txf='{$id_sistema}'");        if ($res[0]) {            $acao = 'atualiza';        } else {            $acao = 'insere';        }        switch ($cadastro['Ativo_sel']) {            case 'S':                $cadastro['Ativo_sel'] = 'SIM';                break;            case 'N':                $cadastro['Ativo_sel'] = 'NAO';                break;            case '1':                $cadastro['Ativo_sel'] = 'SIM';                break;            case '0':                $cadastro['Ativo_sel'] = 'NAO';                break;            case 1:                $cadastro['Ativo_sel'] = 'SIM';                break;            case 0:                $cadastro['Ativo_sel'] = 'NAO';                break;            default:                $cadastro['Ativo_sel'] = 'SIM';                break;        }        $this->load->library('validacao');        switch ($acao) {            case 'atualiza':                if (!$cadstro['Email_txf']) {                    $cadastro['Email_txf'] = 'contato@landshosting.com.br';                }                if ($this->mbc->updateTable('cadastros_teste', $cadastro, 'Id_sistema_txf', $id_sistema)) {                    $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Cadastro atualizado com sucesso'), 200);                } else {                    $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                }                break;            case 'insere':                $cadastro['Data_dat'] = date("Y-m-d H:i:s");                $rules = array(                    array('field' => 'Login_txf', 'label' => 'Login_txf', 'rules' => 'required'),                    array('field' => 'Senha_txf', 'label' => 'Senha_txf', 'rules' => 'required'),//                    array('field' => 'Email_txf', 'label' => 'Email_txf', 'rules' => 'required'),//                    array('field' => 'Telefone_txf', 'label' => 'Telefone_txf', 'rules' => 'required'),                );                $this->validacao->set_rules($rules);                if ($this->validacao->run('cadastros_post') != false) {                    $login = $_POST['Login_txf'];                    $senha = $_POST['Senha_txf'];                    if (!$cadstro['Email_txf']) {                        $cadastro['Email_txf'] = 'contato@landshosting.com.br';                    }                    $sql = "select * from cadastros_teste where Login_txf='{$login}' and Senha_txf='{$senha}'";//                    ver($sql);                    $cadastro_existente = $this->mbc->executa_sql($sql);                    if ($cadastro_existente[0]) {                        $this->response(array('codigo' => 400, 'status' => 'error', 'message' => "Já existe um usuário com o login e senha que se deseja inserir"), 200);                    }                    if ($this->mbc->db_insert('cadastros_teste', $cadastro)) {                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Cadastro gravado com sucesso'), 200);                    } else {                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                    }                } else {                    $this->response(array('codigo' => 400, 'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 200);                }                break;        }    }    function resultados_post() {//        $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Nenhum campo enviado!'), 200);                $this->busca_configuracoes();        $usuario = $this->cadastro;        date_default_timezone_set('America/Sao_Paulo');        $resultado = $_POST;        $resultado['Id_cadastro'] = $usuario->Id_int;        $resultado['Atualizacao_dat'] = date("Y-m-d H:i:s");//        if (!is_lands()) {        //  $this->response(array('status' => 'error', 'message' => 'Aguarde,função em desenvolvimento!'), 200);//        }                 if (!$_POST) {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Nenhum campo enviado!'), 200);        }        if (!$_POST['Ano_req_exame']) {            $this->response(array('codigo' => 200, 'status' => 'error', 'message' => 'Ano_req_exame obrigatorio!'), 200);        }        $ano_req_exame = $_POST['Ano_req_exame'];        $res = $this->mbc->executa_sql("select * from resultados where Ano_req_exame='{$ano_req_exame}'");        if ($res[0]) {            $acao = 'atualiza';        } else {            $acao = 'insere';        }        //Ano_req_exame=2016_0156_184&        //            $resposta=json_encode($_REQUEST);//            $this->response(array('status' => 'error', 'message' => $resposta), 200);        $this->load->library('validacao');        switch ($acao) {            case 'atualiza':                if ($this->mbc->updateTable('resultados', $resultado, 'Ano_req_exame', $ano_req_exame)) {                    $this->dispara_push($resultado, 'atualiza_resultado');                    $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Resultado atualizado com sucesso'), 200);                } else {                    $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                }                break;            case 'insere':                $resultado['Data_dat'] = date("Y-m-d H:i:s");                $rules = array(                    array('field' => 'Id_ficha', 'label' => 'Id_ficha', 'rules' => 'required'),                    array('field' => 'Nome_txf', 'label' => 'Nome_txf', 'rules' => 'required'),                    array('field' => 'Proprietario_txf', 'label' => 'Proprietario_txf', 'rules' => 'required'),                    array('field' => 'Animal_txf', 'label' => 'Animal_txf', 'rules' => 'required'),                    array('field' => 'Arquivo_txf', 'label' => 'Arquivo_txf', 'rules' => 'required'),                );                $this->validacao->set_rules($rules);                if ($this->validacao->run('resultados_post') != false) {                    if ($this->mbc->db_insert('resultados', $resultado)) {                        $this->dispara_push($resultado, 'insere_resultado');                        $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Resultado gravado com sucesso'), 200);                    } else {                        $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 200);                    }                } else {                    $this->response(array('codigo' => 400, 'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 200);                }                break;        }    }    function deleta_resultado_post() {        $this->busca_configuracoes();        date_default_timezone_set('America/Sao_Paulo');        if (!$_POST) {            $this->response(array('codigo' => 400, 'status' => 'error', 'message' => 'Nenhum campo enviado!'), 200);        }        if (!$_POST['Ano_req_exame']) {            $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Ano_req_exame obrigatorio!'), 200);        }        $ano_req_exame = $_POST['Ano_req_exame'];        $res = $this->mbc->executa_sql("select * from resultados where Ano_req_exame='{$ano_req_exame}'");        if ($res[0]) {            if ($this->mbc->db_delete('resultados', 'Ano_req_exame', $ano_req_exame)) {                $this->response(array('codigo' => 200, 'status' => 'success', 'message' => 'Resultado excluído com sucesso'), 200);            } else {                $this->response(array('codigo' => 500, 'status' => 'error', 'message' => 'Erro ao excluir resultado!'), 200);            }        } else {            $this->response(array('codigo' => 200, 'status' => 'error', 'message' => 'Resultado nao encontrado!'), 200);        }    }}