<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');require_once(COMMONPATH .        'libraries/REST_Controller.php');//error_reporting(E_ALL);//ini_set('display_errors', 1);class rest_lab extends REST_Controller {    public $cadastro;    public $configuracoes;    function __construct() {        parent::__construct();//        header("Access-Control-Allow-Origin: *", true);//header("Access-Control-Allow-Credentials: true", true);//header("Access-Control-Allow-Methods: OPTIONS, GET, POST", true);        header("Access-Control-Allow-Headers: x-api-key, x-senha, x-usuario", true);        header("Access-Control-Max-Age: 842100", true);      $this->response->format = 'json';            $this->autentica();          }    function autentica() {        if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {            $this->response(array('codigo'=> 200, 'status' => 'success', 'message' => 'ok'), 200);        }        if (!$_SERVER['HTTP_X_SENHA'] || !$_SERVER['HTTP_X_USUARIO']) {            $this->response(array('codigo'=> 403, 'status' => 'error', 'error' => 'x-usuario and x-senha são requeridos no cabeçalho.'), 403);        }        $senha = $_SERVER['HTTP_X_SENHA'];        $usuario = $_SERVER['HTTP_X_USUARIO'];        $cadastro = $this->mbc->executa_sql("select * from cadastros where Login_txf='{$usuario}' and Senha_txf='{$senha}'");ver($cadastro);                if ($cadastro[0]->Id_int) {            if ($cadastro[0]->Ativo_sel != 'SIM') {                $this->response(array('codigo'=> 403, 'status' => 'error', 'error' => 'Cadastro inativo, consulte o laboratório.'), 403);            } else {                $this->cadastro = $cadastro[0];            }        } else {            $this->response(array('codigo'=> 403, 'status' => 'error', 'error' => 'Usuário e senha inválidos.'), 403);        }    }    function teste_get() {        $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Conexão estabelecida corretamente'), 200);    }    function login_get() {        $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Login Aceito'), 200);    }    function exames_get() {        $where = '';        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where = " and Id_int='$id'";        }        $exames = $this->mbc->executa_sql("select * from exames where Ativo_sel='SIM' $where");        if (isset($exames[0])) {            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $exames),200);        } else {            $this->response(array('codigo'=> 404, 'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 404);        }    }    function cadastro_get() {        $id = $this->cadastro->Id_int;        $where = " and Id_int='$id'";        $cadastros = $this->mbc->executa_sql("select * from cadastros where Ativo_sel='SIM' $where");        if (isset($cadastros[0])) {            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $cadastros),200);        } else {            $this->response(array('codigo'=> 404,'status' => 'error', 'message' => 'Cadastro não encontrado!'), 404);        }    }    function categorias_exames_get() {        $where = '';        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where = " and Id_int=$id";        }        $exames = $this->mbc->executa_sql("select * from categorias_exames where Id_int is not null $where");        if (isset($exames[0])) {            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $exames),200);        } else {            $this->response(array('codigo'=> 404,'status' => 'error', 'message' => 'O registro especificado não foi encontrado!'), 404);        }    }    function busca_configuracoes() {        if ($this->mbc->tabelaexiste('configuracoes')) {            $config = $this->mbc->executa_sql("select * from configuracoes");        }        if ($config[0]->Id_int) {            $this->configuracoes = $config[0];        } else {            $this->configuracoes->Email_exames_txf = 'gustavo.vedana@landsdigital.com.br';            $this->configuracoes->Email_materiais_txf = 'gustavo.vedana@landsdigital.com.br';        }    }    function resultados_solicitacao_get() {        $where = "where Id_cadastro ='{$this->cadastro->Id_int}'";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_solicitacao='$id'";        } else {            $this->response(array('codigo'=> 400,'status' => 'error', 'message' => 'Id da solicitação é obrigatoria!'), 400);        }        $sql = "select r.*, CONCAT( '{$this->app->Url_cliente}usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/', r.Arquivo_txf ) AS Caminho_txf from resultados r  $where";        $resultados = $this->mbc->executa_sql($sql);        if (isset($resultados[0])) {            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $resultados),200);        } else {            $this->response(array('codigo'=> 404,'status' => 'error', 'message' => 'Nenhum resultado encontrado!'), 404);        }    }    function resultados_get() {        $where = "where Id_cadastro ='{$this->cadastro->Id_int}'";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_ficha='$id'";        }//        ver($this->app->Url_cliente);        $sql = "select r.*, CONCAT( '{$this->app->Url_cliente}usuarios/ftp/{$this->cadastro->Login_txf}-{$this->cadastro->Senha_txf}/', r.Arquivo_txf ) AS Caminho_txf from resultados r  $where";        $resultados = $this->mbc->executa_sql($sql);        if (isset($resultados[0])) {            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $resultados),200);        } else {            $this->response(array('codigo'=> 404,'status' => 'error', 'message' => 'Nenhum resultado encontrado!'), 404);        }    }    function solicitacao_exames_post() {        $this->busca_configuracoes();        $usuario = $this->cadastro;        $this->smarty->assign('usuario', $usuario);        $email = $_POST;        $exames_solicitados = explode(',', $_POST['Exames']);        $this->smarty->assign('origem', 'rest');//        $exames_categorias = $this->mbc->buscar_completo("categorias_exames");        $exames = $this->mbc->buscar_tudo("exames", "where Ativo_sel='SIM' order by Categoria_sel,Exame_txf");        $exames_finais = array();        foreach ($exames as $exame) {            if (in_array($exame->Id_int, $exames_solicitados)) {                $exames_finais[] = $exame;            }        }        $this->smarty->assign('exames', $exames_finais);        if ($usuario->Tipo_pessoa_txf == 'F') {            $clinica = $usuario->Nome_txf;        } else {            $clinica = $usuario->Nome_fantasia_txf;        }        $email['Nome_txf'] = $clinica;        $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;        $email['Email_txf'] = $usuario->Email_txf;        $email['Destinatario_txf'] = $this->configuracoes->Email_exames_txf;        date_default_timezone_set('America/Sao_Paulo');        $solicitacao = $_POST;        $solicitacao['Data_dat'] = date("Y-m-d");        $solicitacao['Hora_txf'] = date("H:i:s");        $solicitacao['Clinica_txf'] = $clinica;        $solicitacao['Id_objeto_con'] = $usuario->Id_int;        $solicitacao['Tabela_con'] = 'cadastros';        $solicitacao['Origem_txf'] = 'rest';//        if ($this->valida_extra()) {//            $extras = $this->busca_extras();//            $this->smarty->assign('extras', $extras);//        }////        if ($_POST['pontos']) {//            $pontos = $_POST['pontos'];//            $this->smarty->assign('pontos', $pontos);//        }        $tpl = $this->model_smarty->retrurn_email('exames', $this->app->Template_txf);        $solicitacao['Solicitacao_txa'] = $tpl;        $this->load->library('validacao');        $rules = array(            array('field' => 'Ficha_txf', 'label' => 'Ficha_txf', 'rules' => 'trim|required'),            array('field' => 'Paciente_txf', 'label' => 'Paciente_txf', 'rules' => 'trim|required'),            array('field' => 'Idade_txf', 'label' => 'Idade_txf', 'rules' => 'trim|required'),            array('field' => 'Especie_txf', 'label' => 'Especie_txf', 'rules' => 'trim|required'),            array('field' => 'Raca_txf', 'label' => 'Raca_txf', 'rules' => 'trim|required'),            array('field' => 'Sexo_txf', 'label' => 'Sexo_txf', 'rules' => 'trim|required'),            array('field' => 'Proprietario_txf', 'label' => 'Proprietario_txf', 'rules' => 'trim|required'),            array('field' => 'Responsavel_txf', 'label' => 'Responsavel_txf', 'rules' => 'trim|required'),            array('field' => 'Crmv_txf', 'label' => 'Crmv_txf', 'rules' => 'trim|required'),//            array('field' => 'Observacoes_txa', 'label' => 'Observacoes_txa', 'rules' => 'trim|required'),            array('field' => 'Exames', 'label' => 'Exames', 'rules' => 'trim|required'),        );        $this->validacao->set_rules($rules);        if ($this->validacao->run('resultados_post') != false) {            if ($this->mbc->db_insert('solicitacoes', $solicitacao)) {                $resposta = $this->mbc->executa_sql("select Id_int, Data_dat, Hora_txf, Proprietario_txf, Paciente_txf, Ficha_txf from solicitacoes where Id_objeto_con={$this->cadastro->Id_int} order by Id_int desc limit 1");//            $resposta = $this->mbc->executa_sql("select * from solicitacoes where Id_objeto_con={$this->cadastro->Id_int} order by Id_int desc limit 1");                if ($resposta[0]->Id_int) {                    $resposta[0]->Exames = $exames_finais;                    $this->load->model('model_mail');                    $this->model_mail->inicializa($this->app, $this->cliente);                    if ($this->model_mail->envia_email_tpl($email, 'exames')) {                        $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Solicitação recebida com sucesso', 'data' => $resposta),200);                    } else {                        $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao enviar email!'), 500);                    }                } else {                    $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 500);                }            } else {                $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 500);            }        } else {            $this->response(array('status' => 'error', 'message' => $this->validacao->get_msg_erro()), 400);        }    }    function solicitacoes_get() {        $where = "where Id_objeto_con='{$this->cadastro->Id_int}'";        if ($this->uri->segment(3)) {            $id = $this->uri->segment(3);            $where.= " and Id_int='$id'";        }        $solicitacoes = $this->mbc->executa_sql("select * from solicitacoes $where");        if (isset($solicitacoes[0])) {            $exames = $this->mbc->buscar_tudo("exames", "where Ativo_sel='SIM' order by Categoria_sel,Exame_txf");            foreach ($solicitacoes as $solicitacao) {                unset($solicitacao->Solicitacao_txa);                $exames_solicitados = explode(',', $solicitacao->Exames);//        $exames_categorias = $this->mbc->buscar_completo("categorias_exames");                $solicitacao->Lista_exames = array();                foreach ($exames as $exame) {                    if (in_array($exame->Id_int, $exames_solicitados)) {                        $solicitacao->Lista_exames[] = $exame;                    }                }            }            $this->response(array('codigo'=> 200,'status' => 'success', 'data' => $solicitacoes),200);        } else {            $this->response(array('codigo'=> 404,'status' => 'error', 'message' => 'Nenhuma solicitação encontrada!'), 404);        }    }    function resultados_post() {        $this->busca_configuracoes();        $usuario = $this->cadastro;        date_default_timezone_set('America/Sao_Paulo');        $resultado = $_POST;        $resultado['Id_cadastro'] = $usuario->Id_int;        $resultado['Atualizacao_dat'] = date("Y-m-d H:i:s");//        if (!is_lands()) {        //  $this->response(array('status' => 'error', 'message' => 'Aguarde,função em desenvolvimento!'), 500);//        }          if (!$_POST) {            $this->response(array('codigo'=> 400,'status' => 'error', 'message' => 'Nenhum campo enviado!'), 400);        }        if (!$_POST['Ano_req_exame']) {            $this->response(array('codigo'=> 200,'status' => 'error', 'message' => 'Ano_req_exame obrigatorio!'), 200);        }        $ano_req_exame = $_POST['Ano_req_exame'];        $res = $this->mbc->executa_sql("select * from resultados where Ano_req_exame='{$ano_req_exame}'");        if ($res[0]) {            $acao = 'atualiza';        } else {            $acao = 'insere';        }        //Ano_req_exame=2016_0156_184&        //            $resposta=json_encode($_REQUEST);//            $this->response(array('status' => 'error', 'message' => $resposta), 400);        $this->load->library('validacao');        switch ($acao) {            case 'atualiza':                if ($this->mbc->updateTable('resultados', $resultado, 'Ano_req_exame', $ano_req_exame)) {                    $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Resultado atualizado com sucesso'),200);                } else {                    $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 500);                }                break;            case 'insere':                $resultado['Data_dat'] = date("Y-m-d H:i:s");                $rules = array(                    array('field' => 'Id_ficha', 'label' => 'Id_ficha', 'rules' => 'required'),                    array('field' => 'Nome_txf', 'label' => 'Nome_txf', 'rules' => 'required'),                    array('field' => 'Proprietario_txf', 'label' => 'Proprietario_txf', 'rules' => 'required'),                    array('field' => 'Animal_txf', 'label' => 'Animal_txf', 'rules' => 'required'),                    array('field' => 'Arquivo_txf', 'label' => 'Arquivo_txf', 'rules' => 'required'),                );                $this->validacao->set_rules($rules);                if ($this->validacao->run('resultados_post') != false) {                    if ($this->mbc->db_insert('resultados', $resultado)) {                        $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Resultado gravado com sucesso'),200);                    } else {                        $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao gravar solicitacao!'), 500);                    }                } else {                    $this->response(array('codigo'=> 400,'status' => 'error', 'message' => $this->validacao->get_msg_erro()), 400);                }                break;        }    }    function deleta_resultado_post() {        $this->busca_configuracoes();        date_default_timezone_set('America/Sao_Paulo');        if (!$_POST) {            $this->response(array('codigo'=> 400,'status' => 'error', 'message' => 'Nenhum campo enviado!'), 400);        }        if (!$_POST['Ano_req_exame']) {            $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Ano_req_exame obrigatorio!'), 500);        }        $ano_req_exame = $_POST['Ano_req_exame'];        $res = $this->mbc->executa_sql("select * from resultados where Ano_req_exame='{$ano_req_exame}'");        if ($res[0]) {            if ($this->mbc->db_delete('resultados', 'Ano_req_exame', $ano_req_exame)) {                $this->response(array('codigo'=> 200,'status' => 'success', 'message' => 'Resultado excluído com sucesso'),200);            } else {                $this->response(array('codigo'=> 500,'status' => 'error', 'message' => 'Erro ao excluir resultado!'), 500);            }        } else {            $this->response(array('codigo'=> 200,'status' => 'error', 'message' => 'Resultado nao encontrado!'), 200);        }    }}