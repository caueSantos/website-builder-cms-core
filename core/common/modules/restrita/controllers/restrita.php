<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');require_once(COMMONPATH .    'core/lands_core.php');class restrita extends lands_core{    public $usuario;    public $Pasta_exames = 'usuarios/ftp/';    function __construct()    {        $this->load->library('session');        parent::__construct();        $this->checa_login();        $this->abre_area_restrita();    }    function index()    {        $funcao = $this->pagina_atual;        if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {            $this->pagina_atual = $this->uri->segment($this->app->Segmento_padrao_txf + 1);            $funcao = ($this->uri->segment($this->app->Segmento_padrao_txf + 1));        }        if (!method_exists(__CLASS__, $funcao)) {            $this->carrega_pagina($this->pagina_atual);        } else {            //executa uma funcao que deve ser programa nesta classe.            $this->$funcao();        }    }    function abre_area_restrita()    {        if (isset($this->session->userdata['usuario'])) {            $this->usuario = $this->session->userdata['usuario'];            $this->smarty->assign('user', $this->usuario);        }        if (isset($_SESSION)) {            $this->smarty->assign('sessao', $_SESSION);        }        if ($this->uri->segment($this->app->Segmento_padrao_txf + 1)) {            $this->smarty->assign('segment2', $this->uri->segment($this->app->Segmento_padrao_txf + 1));        } else {            $this->smarty->assign('segment2', '');        }        if ($this->uri->segment($this->app->Segmento_padrao_txf + 2)) {            $this->smarty->assign('segment3', $this->uri->segment($this->app->Segmento_padrao_txf + 2));        } else {            $this->smarty->assign('segment3', '');        }        if (isset($this->app->Pasta_exames)) {            $this->Pasta_exames = $this->app->Pasta_exames;        }        // $this->switch_pagina();    }    function switch_pagina()    {        $this->load->library('session');        if ($this->pagina_atual != 'lista_resultados_vet') {            if ($this->usuario->Tipo_sel == 'vet') {                redirect('restrita/lista_resultados_vet');            }        }        switch ($this->pagina_atual) {            case 'editar_cadastro':                //                 if($this->usuario->Tipo_sel=='vet'){                //                redirect('logout');                //                }                $user_id = $this->session->userdata['usuario']->Id_int;                $user = $this->mbc->executa_sql("select * from cadastros where Id_int=$user_id");                if (!isset($user[0]->Id_int))                    die('Erro ao editar usuario, usuario de id ' . $user_id . ' nao foi encontrado');                $this->smarty->assign('user', $user[0]);                break;            case 'baixar_pdf':                $user_id = $this->session->userdata['usuario']->Id_int;                $id = $this->uri->segment($this->app->Segmento_padrao_txf + 2);                $where = "where Id_int={$id}";                $solicitacao = $this->mbc->buscar_completo('solicitacoes', $where);                if (!isset($solicitacao[0]->Id_int)) {                    die('solicitacao nao existe');                }                if ($user_id != $solicitacao[0]->Id_objeto_con) {                    die('Acesso invalido, você só pode ver suas próprias requisições');                } else {                    $user = $this->mbc->executa_sql("select * from cadastros where Id_int=$user_id");                    if (!isset($user[0]->Id_int))                        die('Erro ao usuario de id ' . $user_id . ' nao foi encontrado');                    $this->smarty->assign('user', $user[0]);                    $this->smarty->assign('solicitacao', $solicitacao[0]);                    $html = $this->model_smarty->retorna_tpl('pdf_requisicao', $this->app->Template_txf);                    //                    echo($html);                    $pdfFilePath = "requisicao{$id}.pdf";                    $this->load->library('landspdf');                    $this->pdf = $this->landspdf->load('c', 'A4');                    $this->pdf->WriteHTML($html);                    $this->pdf->Output($pdfFilePath, "D");                    die();                }                break;            case 'restrita':                if ($this->mbc->tabelaexiste('solicitacoes')) {                    $user_id = $this->session->userdata['usuario']->Id_int;                    $solicitacoes = $this->mbc->executa_sql("select * from solicitacoes where Id_objeto_con=$user_id order by Id_int desc limit 10");                    $this->smarty->assign('solicitacoes', $solicitacoes);                } else {                    //   ver('nao existe');                }                break;            case 'solicitacoes':                if ($this->uri->segment(3)) {                    $id_solicitacao = $this->uri->segment(3);                    $and = " and Id_int={$id_solicitacao}";                }                if ($this->mbc->tabelaexiste('solicitacoes')) {                    $user_id = $this->session->userdata['usuario']->Id_int;                    $solicitacoes = $this->mbc->executa_sql("select * from solicitacoes where Id_objeto_con={$user_id}  $and  order by Id_int desc");                    $this->smarty->assign('solicitacoes', $solicitacoes);                } else {                    die('tavela de solicitacoes nao exite');                }                break;            case 'lista_resultados':                //                 if($this->usuario->Tipo_sel=='vet'){                //                redirect('logout');                //                }                $resultados = $this->mbc->executa_sql("select * from sincro where Cadastros_for='{$this->usuario->Id_int}' and Extensao_txf='CLI' order by Data_sincro_dat desc");                $path = "sincro";                foreach ($resultados as $resultado) {                    $data_modificacao = filemtime($path . '/' . $resultado->Pdf_txf);                    $resultado->Data_ord = $data_modificacao;                    $resultado->Data_modificacao_dat = date('Y-m-d H:i:s', $data_modificacao);                }                sorteia_array_objetos($resultados, array('Data_ord' => SORT_DESC));                $this->smarty->assign('resultados', $resultados);                break;            case 'lista_resultados_vet':                $resultados = $this->mbc->executa_sql("select * from sincro where Usuario_txf='{$this->usuario->Usuario_txf}' and Senha_txf='{$this->usuario->Senha_txf}' and Extensao_txf='VET'");                $this->smarty->assign('resultados', $resultados);                break;            case 'resultados':                //                 if($this->usuario->Tipo_sel=='vet'){                //                redirect('logout');                //                }                $pasta = $this->Pasta_exames;                $pasta .= $this->usuario->Login_txf . '-' . $this->usuario->Senha_txf;                $pasta .= '/';                //ver($pasta);                $server = $_SERVER['SERVER_NAME'];                //                //                ver($this->usuario);                //                ver($pasta);                //                // ver($_SERVER);                if (is_dir($pasta)) {                    //                    ver($pasta);                    $pasta_final = "//{$server}/{$pasta}";                    //                    ver($pasta_final);                    //$pasta_final = $this->app->Url_cliente . $pasta;                    redireciona($pasta_final);                    die();                } else {                    echo "<h2>Atenção!</h2>";                    print_r('<h4>Não há resultados disponíveis. Caso tenha dificuldade em visualizar resultados já disponibilizados entre em contato com o laboratório.');                    die();                }                break;            case 'resultados_completo':                /* BUSCA EXAMES DO SOFTEASY */                $sql = "select * from sincro where Cadastros_for='{$this->usuario->Id_int}' and (Extensao_txf='CLI' or Extensao_txf='VET') group by Pdf_txf order by Data_sincro_dat desc";                $resultados = $this->mbc->executa_sql($sql);                $path = "sincro";                foreach ($resultados as $resultado) {                    $data_modificacao = filemtime($path . '/' . $resultado->Pdf_txf);                    $resultado->Data_ord = $data_modificacao;                    $resultado->Data_modificacao_dat = date('Y-m-d H:i:s', $data_modificacao);                    $resultado->Data_modificacao_dat =  date('Y-m-d H:i:s', strtotime($resultado->Data_modificacao_dat . '+1 hour'));                }                sorteia_array_objetos($resultados, array('Data_ord' => SORT_DESC));                $this->smarty->assign('resultados', $resultados);                /* BUSCA EXAMES MULTIVET */                $pasta = $this->Pasta_exames;                $pasta .= $this->usuario->Login_txf . '-' . $this->usuario->Senha_txf;                $pasta .= '/';                if (is_dir($pasta)) {                    $pasta_final = $this->app->Url_cliente . $pasta;                    $this->smarty->assign("pasta_exames", $pasta_final);                }                break;            case 'resultados_ftp':                if ($this->conecta_ftp($this->app->Conexao_ftp_for)) {                    $pasta = $this->usuario->Login_txf . '-' . $this->usuario->Senha_txf;                    $pasta = $this->configuracoes_ftp->Path_txf . $pasta;                    $list = $this->ftp->lista_detalhada($pasta);                    if ($this->app->Lands_id == 'labdemo') {                        $server = 'demos.landsdigital.com.br/labcloud';                    } else {                        $server = $_SERVER['SERVER_NAME'];                    }                    //                    ver($list);                    foreach ($list as $exame) {                        $exame->Link_txf = "//{$server}/usuarios/ftp/{$this->usuario->Login_txf}-{$this->usuario->Senha_txf}/{$exame->name}";                        $exame->Data_dat = date("d/m/Y  H:i:s", $exame->date);                        //                        $exame->time=str_replace(':','',$exame->time);                        //                            $exame->Data_dat = $exame->time . '-' . retorna_mes_fromstring($exame->month) . '-' . str_pad($exame->day, 2, '0', STR_PAD_LEFT);                    }                    sorteia_array_objetos($list, array('date' => SORT_DESC));                    $this->smarty->assign('resultados', $list);                } else {                    die('Erro de conexao ftp');                }                break;            case 'ver_exame':                if ($_POST['link']) {                    $link = $_POST['link'];                }                $this->smarty->assign("link", $link);                break;            default:                break;        }        $this->smarty->assign("sessao_ci", $this->session->all_userdata());        if (isset($_SESSION)) {            $this->smarty->assign("sessao", $_SESSION);        }    }    function post()    {        switch ($this->uri->segment($this->app->Segmento_padrao_txf + 2)) {            case 'exames':                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $this->smarty->assign('usuario', array_to_object($email['usuario']));                $this->smarty->assign('exames', array_to_object($email['exames']));                $email['Nome_txf'] = $email['usuario']['Nome_fantasia_txf'];                $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;                if ($this->model_mail->envia_email_solicitacao_novo($email, 'exames')) {                    $this->smarty->assign('mensagem', 'exame_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'exame_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            case 'exames_v2':                //armazena no banco e envia email                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $usuario = array_to_object($email['usuario']);                $exames = $this->busca_exames();                //$exames = array_to_object($email['exames']);                $this->smarty->assign('usuario', $usuario);                $this->smarty->assign('exames', $exames);                $email['Nome_txf'] = $email['usuario']['Nome_fantasia_txf'];                $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;                if ($usuario->Tipo_pessoa_txf == 'F') {                    $clinica = $usuario->Nome_txf;                } else {                    $clinica = $usuario->Nome_fantasia_txf;                }                date_default_timezone_set('America/Sao_Paulo');                $solicitacao['Data_dat'] = date("Y-m-d");                $solicitacao['Hora_txf'] = date("H:i:s");                $solicitacao['Clinica_txf'] = $clinica;                $solicitacao['Clinica_txf'] = $clinica;                $solicitacao['Tipo_servico_sel'] = $_POST['Tipo_servico_sel'];                $solicitacao['Id_objeto_con'] = $usuario->Id_int;                $solicitacao['Tabela_con'] = 'cadastros';                $tpl = $this->model_smarty->retrurn_email('exames', $this->app->Template_txf);                $solicitacao['Solicitacao_txa'] = $tpl;                $this->mbc->db_insert('solicitacoes', $solicitacao);                if ($this->model_mail->envia_email_solicitacao_novo($email, 'exames')) {                    $this->smarty->assign('mensagem', 'exame_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'exame_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            case 'exames_v3':                //armazena no banco e envia email e gera pdf                //                ver(json_encode($_POST));                //                ver($_POST);                if ($_POST['img_val']) {                    echo "<img src='{$_POST['img_val']}' >";                    die();                }                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $usuario = array_to_object($email['usuario']);                $exames = $this->busca_exames();                //$exames = array_to_object($email['exames']);                $this->smarty->assign('usuario', $usuario);                $this->smarty->assign('exames', $exames);                $email['Nome_txf'] = $email['usuario']['Nome_fantasia_txf'];                $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;                if ($usuario->Tipo_pessoa_txf == 'F') {                    $clinica = $usuario->Nome_txf;                } else {                    $clinica = $usuario->Nome_fantasia_txf;                }                date_default_timezone_set('America/Sao_Paulo');                $solicitacao = $_POST;                $solicitacao['Data_dat'] = date("Y-m-d");                $solicitacao['Hora_txf'] = date("H:i:s");                $solicitacao['Clinica_txf'] = $clinica;                $solicitacao['Id_objeto_con'] = $usuario->Id_int;                $solicitacao['Tabela_con'] = 'cadastros';                if ($this->valida_extra()) {                    $extras = $this->busca_extras();                    $this->smarty->assign('extras', $extras);                }                if ($_POST['pontos']) {                    $pontos = $_POST['pontos'];                    $this->smarty->assign('pontos', $pontos);                }                if ($_POST['canvas_img']) {                    $canvas_img = $_POST['canvas_img'];                    $this->smarty->assign('canvas', $canvas_img);                    $imgName = preg_replace("/[^0-9]/", "", microtime()) . ".jpeg";                    $this->base64_to_jpeg($canvas_img, FCPATH . "/painel/img/" . $imgName);                    $this->smarty->assign('canvas_url', $imgName);                    // ver($imgUrl);                }                $tpl = $this->model_smarty->retrurn_email('exames', $this->app->Template_txf);                $solicitacao['Solicitacao_txa'] = $tpl;                $this->mbc->db_insert('solicitacoes', $solicitacao);                if ($this->model_mail->envia_email_solicitacao_novo($email, 'exames')) {                    $this->smarty->assign('mensagem', 'exame_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'exame_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            case 'exames_rest':                //armazena no banco e envia email e gera pdf                //                ver(json_encode($_POST));                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $usuario = array_to_object($email['usuario']);                $exames = $this->busca_exames();                //$exames = array_to_object($email['exames']);                $this->smarty->assign('usuario', $usuario);                $this->smarty->assign('exames', $exames);                $email['Nome_txf'] = $email['usuario']['Nome_fantasia_txf'];                $email['Assunto_txf'] = "Solicitação de Exames - " . $this->app->Nome_app_txf;                if ($usuario->Tipo_pessoa_txf == 'F') {                    $clinica = $usuario->Nome_txf;                } else {                    $clinica = $usuario->Nome_fantasia_txf;                }                date_default_timezone_set('America/Sao_Paulo');                $solicitacao = $_POST;                $solicitacao['Data_dat'] = date("Y-m-d");                $solicitacao['Hora_txf'] = date("H:i:s");                $solicitacao['Clinica_txf'] = $clinica;                $solicitacao['Id_objeto_con'] = $usuario->Id_int;                $solicitacao['Tabela_con'] = 'cadastros';                if ($this->valida_extra()) {                    $extras = $this->busca_extras();                    $this->smarty->assign('extras', $extras);                }                if ($_POST['pontos']) {                    $pontos = $_POST['pontos'];                    $this->smarty->assign('pontos', $pontos);                }                $tpl = $this->model_smarty->retrurn_email('exames', $this->app->Template_txf);                $solicitacao['Solicitacao_txa'] = $tpl;                $this->mbc->db_insert('solicitacoes', $solicitacao);                if ($this->model_mail->envia_email_tpl($email, 'exames')) {                    $this->smarty->assign('mensagem', 'exame_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'exame_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            case 'pre_visualizar':                date_default_timezone_set('America/Sao_Paulo');                $usuario = array_to_object($_POST['usuario']);                $exames = $this->busca_exames();                if ($this->valida_extra()) {                    $extras = $this->busca_extras();                    $this->smarty->assign('extras', $extras);                }                if ($_POST['pontos']) {                    $pontos = $_POST['pontos'];                    $this->smarty->assign('pontos', $pontos);                }                //                        array_to_object($_POST['exames']);                $this->smarty->assign('usuario', $usuario);                $this->smarty->assign('exames', $exames);                $this->model_smarty->render_ajax('pre_visualizar', $this->app->Template_txf);                die();                break;            case 'template':                date_default_timezone_set('America/Sao_Paulo');                $usuario = array_to_object($_POST['usuario']);                $exames = $this->busca_exames();                $exames_oculto = $this->busca_exames('template');                $this->smarty->assign('usuario', $usuario);                $this->smarty->assign('exames', $exames);                $this->smarty->assign('exames_oculto', $exames_oculto);                $this->model_smarty->render_ajax('template', $this->app->Template_txf);                die();                break;            case 'salvar_template':                date_default_timezone_set('America/Sao_Paulo');                $usuario = array_to_object($_POST['usuario']);                $objeto['Nome_txf'] = $_POST['Nome_txf'];                $objeto['Resumo_txf'] = $_POST['Resumo_txf'];                $objeto['Id_objeto_con'] = $_POST['usuario']['Id_int'];                $objeto['Tabela_con'] = 'cadastros';                $objeto['Exames_txa'] = serialize($_POST['Exames']);                if ($this->mbc->db_insert('templates', $objeto)) {                    $this->smarty->assign('mensagem', 'salvou_ok');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                } else {                    $this->smarty->assign('mensagem', 'salvou_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                }                die();                break;            case 'atualiza_templates':                date_default_timezone_set('America/Sao_Paulo');                $usuario = array_to_object($_POST['usuario']);                $id = $_POST['usuario']['Id_int'];                $templates = $this->mbc->executa_sql("select * from templates where Id_objeto_con=$id order by Nome_txf");                $this->smarty->assign('templates', $templates);                $this->model_smarty->render_bloco('templates', $this->app->Template_txf);                die();                break;            case 'carrega_template':                $this->carrega_dados('formulario_exames');                date_default_timezone_set('America/Sao_Paulo');                $id = $this->uri->segment($this->app->Segmento_padrao_txf + 3);                $exames_carregados = $this->mbc->executa_sql("select * from templates where Id_int=$id");                $exames_carregados[0]->Exames = unserialize($exames_carregados[0]->Exames_txa);                $this->smarty->assign('exames_carregados', $exames_carregados);                $this->model_smarty->render_bloco('abas_exames', $this->app->Template_txf);                die();                break;            case 'deleta_template':                $id = $this->uri->segment($this->app->Segmento_padrao_txf + 3);                $this->mbc->deleteRow('templates', 'Id_int', $id);                $templates = $this->mbc->executa_sql("select * from templates order by Nome_txf");                $this->smarty->assign('templates', $templates);                $this->model_smarty->render_bloco('templates', $this->app->Template_txf);                die();                break;            case 'materiais':                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $mat = $_POST['materiais'];                $this->conecta_mbc($this->app->Conexoes_for);                $materiais = $this->mbc->executa_sql("select * from materiais");                $materiais_escolhidos = array();                foreach ($materiais as $material) {                    foreach ($mat as $key => $value) {                        if ($material->Id_int == $key && $value != '') {                            $material->Quantidade_txf = $value;                            $materiais_escolhidos[] = $material;                        }                    }                }                $email['materiais'] = $materiais_escolhidos;                $this->smarty->assign('usuario', array_to_object($email['usuario']));                $this->smarty->assign('materiais', array_to_object($email['materiais']));                $email['Nome_txf'] = $email['usuario']['Nome_fantasia_txf'];                $email['Assunto_txf'] = "Solicitação de Materiais - " . $this->app->Nome_app_txf;                if ($this->model_mail->envia_email_tpl($email, 'materiais')) {                    $this->smarty->assign('mensagem', 'materiais_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'materiais_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            case 'orcamento':                $this->load->model('model_mail');                $this->model_mail->inicializa($this->app, $this->cliente);                $email = $_POST;                $this->smarty->assign('usuario', array_to_object($email['usuario']));                $email['Email_txf'] = $email['usuario']['Email_txf'];                $email['Nome_txf'] = $email['Responsavel_txf'];                $email['Assunto_txf'] = "Novo Orçamento - " . $this->app->Nome_app_txf;                if ($this->model_mail->envia_email_tpl($email, 'orcamento')) {                    $this->smarty->assign('mensagem', 'orcamento_enviado');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                } else {                    $this->smarty->assign('mensagem', 'orcamento_erro');                    $this->model_smarty->render_ajax('mensagens', $this->app->Template_txf);                    die();                }                break;            default:                break;        }    }    function base64_to_jpeg($base64_string, $output_file)    {        // open the output file for writing        $ifp = fopen($output_file, 'wb');        // split the string on commas        // $data[ 0 ] == "data:image/png;base64"        // $data[ 1 ] == <actual base64 string>        $data = explode(',', $base64_string);        // we could add validation here with ensuring count( $data ) > 1        fwrite($ifp, base64_decode($data[1]));        // clean up the file resource        fclose($ifp);        return $output_file;    }    function valida_extra()    {        foreach ($_POST['extra'] as $extra) {            if (is_array($extra)) {                if ($extra[0] != '') {                    return true;                }            } else {                if ($extra) {                    return true;                }            }        }        return false;    }    function busca_extras()    {        $extras = $_POST['extra'];        foreach ($extras as $key => $value) {            if (is_array($value)) {                $extras_final[$key] = implode(",", $value);            } else {                $extras_final[$key] = $value;            }        }        return $extras_final;    }    function busca_exames($funcao = null)    {        switch ($funcao) {            case 'template':                $exames = array_to_object($_POST['exames']);                foreach ($exames as $exame) {                    foreach ($exame as $ex) {                        $inzame = $this->mbc->executa_sql("select * from exames where Id_int='$ex'");                        $lista[] = $inzame[0];                    }                }                return $lista;                break;            default:                $exames = array_to_object($_POST['exames']);                foreach ($exames as $key => $value) {                    foreach ($value as $ex) {                        $inzame = $this->mbc->executa_sql("select * from exames where Id_int='$ex'");                        $lista[$key][] = $inzame[0]->Exame_txf . '(' . $inzame[0]->Amostra_txf . ')';                    }                }                return $lista;                break;        }    }}